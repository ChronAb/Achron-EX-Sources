// Copyright (C) 2002-2011 Hazardous Software Inc.  See EULA for license information.

#include common/include/unit_common_header.ais


//called by _CHRONPORTED , unit should have capbit 5 set when cporting via gate

object myCarrier =  unit->Carrier;
//this unit is being carried and the carrier must have been chronoported [tanks carrying marines]
if (myCarrier->IsAlive==1) {  

	if (ap[$STOREDUNIT]!=0) { //has commander stored
        object oldCommander = ap[$STOREDUNIT];
		object myCommander = 0;
		
		//first check if the carrier tank was the original commander
		if (myCarrier->Parent == oldCommander) {
			myCommander = myCarrier;  //restore commander
		}
		else { 
			int cap = myCarrier->AdditionalParameters;
			//check if same commander as tank
			if (cap[$STOREDUNIT] == oldCommander) {
				//wait a tick for the carrier tank to restore its commander
				if (cap[$CPORT_STORED_COMMANDER]) {
					PERFORM NOTHING; 
				}
				if (cap[$CPORT_RESTORED_COMMANDER]) {
					myCommander = myCarrier->Commander; //restore commander
				}
			}
			else //check if one of the other carried troops was the commander
			{
				object sub = myCarrier->NextCarriedUnit;
				if (sub>0 && sub==unit) { sub = myCarrier->NextCarriedUnit; } //get the OTHER carried unit
				if (sub>0 && sub->Parent==oldCommander) {
					myCommander = sub; //restore commander
				}
			}
		}
		
		//restore commander
		if (myCommander > 0) {
			PERFORM SET_ADDITIONAL_PARAMS 0;
			target = myCommander;
			PERFORM $ACTION_CHANGE_COMMANDER target;
			PERFORM NOTHING;
		}
	}
	
	
	PERFORM SET_OBJECTIVE 0;
	PERFORM SET_ADDITIONAL_PARAMS 0;
	PERFORM NOTHING;
}



//int myStatus = unit->Status;
if (myStatus[$CAP_BIT_5] ) { //just chronoported

	//carrier tanks that just chronoported should set this objective on the carried marines 
	//so they can attempt to reset their previous commanders
	if (uclass==$TANK_CLASS||uclass==$TANK2_CLASS||uclass==$MAR2_CLASS) {
		target = unit->NextCarriedUnit;
		while (target>0) {
			PERFORM SET_OTHER_OBJECTIVE $OBJECTIVE_CHRONOPORTED;
			target = unit->NextCarriedUnit;
		 }
	}
	
	//flag to set when finished with the restoring process, clear ap and return to idle/moveaway
	int doneRestoring = 0;  
	
	if (ap[$CPORT_NO_COMMANDER]) { //nothing to restore
		doneRestoring = 1;
	}
	else {

		if ( ap[$CPORT_STORED_COMMANDER] ) {
		
			if ( ap[$STOREDUNIT] != 0 )  //has old commander stored
			{ 
				object oldCommander = ap[$STOREDUNIT];
				int resetCommander = 0;	
				
				//find chronoported unit who was this unit's commander and set it back as the commander
				object myCommander = QUERY UNIT [unit] MIN [unit<=>query] WHERE [ query->Parent == oldCommander ];
				if (myCommander>0) { resetCommander = 1; }
				else 
				{	//find a nearby unit that had the same commander and already restored it
					target = QUERY UNIT [unit] MIN [unit<=>query] WHERE [(query->Status)[$CAP_BIT_5] && 
									(temp1 = query->AdditionalParameters)[$CPORT_RESTORED_COMMANDER] && temp1[$STOREDUNIT] == oldCommander];
					if (target > 0) 
					{ 
						resetCommander = 1; 
						myCommander = target->Commander;
					}
				}
				
				if (resetCommander) 
				{
					
					ap[$CPORT_STORED_COMMANDER] = 0;
					ap[$CPORT_RESTORED_COMMANDER] = 1; 
					
					PERFORM SET_ADDITIONAL_PARAMS ap;
					target = myCommander;
					PERFORM $ACTION_CHANGE_COMMANDER target;
					PERFORM NOTHING;
				}
				else  //could not find previous commander
				{ 				
					doneRestoring = 1;
				}
			} 
			else //lost the stored commander somehow
			{ 
				doneRestoring = 1;
			}
		}
		else
		{
			doneRestoring = 1;
		}		
	}
	
	if ( doneRestoring ) {
		//clear 'chronoported' cap_bit_5
		PERFORM $ACTION_CLEAR_CHRONOPORTED;			
		//store current location for moving away
		PERFORM SET_PARAM unit->Position;
		ap = 0;
	}
}
    
if ($AUTOPILOT) { //only move away if autopilot player
		

	if (ap[$OBJECTIVE] != $OBJECTIVE_CHRONOPORTED) {

		PERFORM RAND; int x = perf_ret[0,4] - 8; PERFORM RAND; int y = perf_ret[0,4] - 8;
		if (x==0) { x = 2; } 
		if (y==0) { y = 2; }
		int unitPosition = unit->Position;
		int xpos = unitPosition[$Xpos];
		int ypos = unitPosition[$Ypos];
		int zpos = unitPosition[$Zpos];
		
		if(!$IS_GREKIM  && $AUTOPILOT) { //only if it's a NON-passive human or vecgir computer player
			object gate = QUERY UNIT [unit] MIN [unit<_>query] WHERE [ (query->Class==125 || query->Class==2075) &&  query->IsAlly ];
			if (gate->IsAlive==1) { //autopilot will move further away and relative to the gate
				PERFORM RAND; x = perf_ret[0,4] - 8; PERFORM RAND; y = perf_ret[0,4] - 8;
				if (x==0) { x = 7; } 
				if (y==0) { y = 7; }
				if (x>0) { x = x+10; } else { x = x-10; }
				if (y>0) { y = y+10; } else { y = y-10; }
				temp1 = gate->Position;
				xpos = temp1[$Xpos];
				ypos = temp1[$Ypos];
				zpos = temp1[$Zpos];
			}
		}
		
		int location=0;
		location[$Xpos] = xpos-x;  location[$Ypos] = ypos-y; location[$Zpos] = zpos;
		PERFORM SET_PARAM location;
		ap[$UNIT_BIT] = 0;     //clear AP_UNIT bit
		ap[$STOREDUNIT] = 0;  //clear UNIT FIELD
		ap[$OBJECTIVE] = $OBJECTIVE_CHRONOPORTED;
		PERFORM SET_ADDITIONAL_PARAMS ap;

	}

	int op = unit->ObjectiveParameters;
	dir = QUERY BESTMOVE [unit, $ACTION_MOVE] MIN [query <=> op] WHERE [1];
	dir[16,8]=0; //clear out the 3rd byte that stores the counter
	if (dir && dir != $QUERY_EXHAUSTED ) {
		PERFORM $ACTION_MOVE dir;
	} else {
		PERFORM SET_OBJECTIVE 0;
		PERFORM SET_ADDITIONAL_PARAMS 0;
	}
} 
else {
	PERFORM SET_OBJECTIVE 0;
	PERFORM SET_ADDITIONAL_PARAMS 0;
	
/*	$INIT_GLOBAL_CHRONAL_PROPERTIES   //Clear after CP option removed in favor of hierarchy option 
	if ( $CLEAR_QUEUE_AFTER_CHRONOPORT ) {
		PERFORM CLEAR_QUEUE;
	}*/
}
